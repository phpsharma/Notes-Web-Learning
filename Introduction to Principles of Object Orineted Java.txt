Introduction to Principles of Object Orineted JavaScript

  Encapsulation: Data can be grouped together with functionality that operates on that data. This, quite simply, is the definition of an object

  Aggregation: One Object reference another object

  Inheritance: A newly created object has the same charactristics as another object without explicitly duplicating its functionality

  Polymorphism: One interface may be implemented by multiple objects.


++++++++++++++++++++++++++++++++++
Primitive and Reference Types - 1
++++++++++++++++++++++++++++++++++
	Whar are Types?
	Primitive Types
		Identifying Primitive Types
		Primitive Methods
	Referece Types
		Creating Objects
		Dereferencing Objects
		Adding or Removing Properties
	Instantiating Built-in Types
		Literal Forms
		Object and Array literals
		Function Literals
		Regular Expression Literals
	Property Access
	Identifyig Reference Types
	Identufying Arrays
	Primitive Wrapper Types
	Summary
	++++++++++++++++++++++++++++++++++
	While javascript doesn't have classes, it does have types. 

	Each variable or piece of data is associated with a specific primitive or reference type.
	
	The five primitive types (String, Number, Boolean, Null, Undefined) represent simple values stored directly in the variable object for a given context.

	You can use typeof to identify primitive types with the exception of null, which must be compared directly against  the special value null.

	Reference types are the closest thing to classes in JavaScript, and objects are instances  of reference types.

	You can create a new object using "new" operator or a reference literal. 

	You access properties and methods primarly using dot notation, but you can also use bracket[] notation.

	Functions are objects in JavaScript. You can identify them with he "typeof" operator. 

	You should use "instaneof" with a constructor to identify objects of any other reference type.

	To make primitives more like references, Javascript has three wrapper types: String, Number, and Boolean. 

	Javascript creates these objects behind the scenes so that you can treat primitives like regular objects, but these temporary objects are destroyed as soon as the statement using them is complete.

	Although you can create your own instances of primitive wrappers, it's best not to do that because it can be confusing...

	++++++++++++++++++++++++++++++++++
	Functions 17
	++++++++++++++++++++++++++++++++++
	Declarations vs Expressions
	Functions as Values
	Parameters
	Overloading
	Object Methods
		The this object
		Chamging this
	Summary
	++++++++++++++++++++++++++++++++++

	There are two literal forms of functions.

	The first is a "function declaration" which begins with the function keyword and includes the name of the function immediatelu following it.
	Example: 

	function add(num1, num2){
		return num1 + num2
	}

    The second is "function expression", which doesn't require a name after function. These functions are considered as anonymous, because the function obkect itself has no name. Instead, function expressions are typically referenced via a variable or property, as in the example..

    var add = function(num1, num2){
    	return num1+num2;
    };
